plugins {
    id 'ml-loader'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    implementation("net.xstopho.resourceconfigapi:resourceconfigapi-forge:${resource_config_api}")
    implementation("net.xstopho.resourcelibrary:resourcelibrary-forge:${resource_library}")

    //runtimeOnly("maven.modrinth:jei:${jei_version}-forge")
    //runtimeOnly("curse.maven:configured-457570:5441231")
}

mixin {
    config("${mod_id}.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    copyIdeResources = true
    reobf = false

    runs {
        client {
            workingDirectory file('../common/runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
        server {
            workingDirectory file('../common/runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Server"
            args '--nogui'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
        data {
            workingDirectory file('../common/runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated'), '--existing', project(':common').file("src/main/resources/").getAbsolutePath()
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

jar {
    manifest {
        attributes([
                'FMLCorePluginContainsFMLMod': 'true',
                'MixinConfigs': "${mod_id}.mixins.json"
        ])
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

publishMods {
    file = jar.archiveFile
    modLoaders.add("forge")
}